// backend/controllers/agentController.js
const { Configuration, OpenAIApi } = require('openai');
const fileService = require('../services/fileService');
const openaiService = require('../services/openaiService');
const socketService = require('../services/socketService');
const { AGENT_ROLES } = require('../utils/constants');

/**
 * Run an agent to process a task
 */
exports.runAgentHandler = async (req, res, next) => {
  const { projectId, agentName } = req.params;
  
  // Check if the agent exists
  if (!AGENT_ROLES[agentName]) {
    return res.status(400).json({
      error: `Invalid agent name: ${agentName}`
    });
  }
  
  try {
    // Update project status
    await updateProjectStatus(projectId, agentName);
    
    // Start the agent processing in the background
    // In a real implementation, we would handle the agent logic here
    // and have the API return immediately while the agent works
    res.json({
      message: `Agent ${agentName} started successfully`,
      projectId,
      agentName
    });
    
    // Execute agent logic asynchronously
    processAgentTask(projectId, agentName);
  } catch (error) {
    next(error);
  }
};

/**
 * Update project status when agent starts
 */
async function updateProjectStatus(projectId, agentName) {
  const agent = AGENT_ROLES[agentName];
  const status = `${agent.name} (${agent.role}) is working...`;
  
  // Log the agent change
  await fileService.appendToLog(projectId, `${agent.name} (${agent.role}) has started working...`);
  
  // Notify clients
  socketService.emitToProject(projectId, 'agentChanged', {
    projectId,
    agent: agentName,
    status
  });
  
  // Update project config
  const fs = require('fs-extra');
  const path = require('path');
  
  const configPath = path.join(__dirname, '../data/projects', projectId, 'config.json');
  const config = await fs.readJson(configPath);
  
  config.currentAgent = agentName;
  config.status = status;
  
  await fs.writeJson(configPath, config, { spaces: 2 });
}

/**
 * Process the agent task asynchronously
 */
async function processAgentTask(projectId, agentName) {
  try {
    // In a real implementation, this would call the OpenAI API with the agent's system prompt
    // For this example, we'll simulate some agent behavior
    
    // Simulate agent thinking time
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // Create some example files based on the agent
    const agent = AGENT_ROLES[agentName];
    
    if (agentName === 'emma') {
      // PM creates PRD
      await fileService.writeFile(
        projectId, 
        'docs/PRD.md',
        `# Product Requirements Document\n\nCreated by Emma (PM)\n\n## Overview\nThis is a sample PRD document that would be generated by the PM agent.\n\n## User Stories\n- User story 1\n- User story 2\n\n## Features\n- Feature 1\n- Feature 2`,
        'Emma'
      );
    } else if (agentName === 'bob') {
      // Architect creates architecture doc
      await fileService.writeFile(
        projectId,
        'docs/Architecture.md',
        `# Architecture Document\n\nCreated by Bob (Architect)\n\n## Tech Stack\n- React\n- Node.js\n- Socket.IO\n\n## System Design\nThis is where the system design would be described...`,
        'Bob'
      );
    } else if (agentName === 'alex') {
      // Engineer creates code files
      await fileService.writeFile(
        projectId,
        'src/App.js',
        `import React from 'react';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Hello World</h1>\n    </div>\n  );\n}\n\nexport default App;`,
        'Alex'
      );
      
      await fileService.writeFile(
        projectId,
        'src/index.js',
        `import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));`,
        'Alex'
      );
    }
    
    // Mark agent task as completed
    await fileService.appendToLog(projectId, `${agent.name} (${agent.role}) has completed their work`);
    
    // Notify clients
    socketService.emitToProject(projectId, 'agentCompleted', {
      projectId,
      agent: agentName,
      status: `${agent.name} has completed their work`
    });
    
  } catch (error) {
    console.error(`Error in agent ${agentName}:`, error);
    
    // Log the error
    await fileService.appendToLog(projectId, `Error in ${agentName}: ${error.message}`);
    
    // Notify clients
    socketService.emitToProject(projectId, 'agentError', {
      projectId,
      agent: agentName,
      error: error.message
    });
  }
}